import fs from 'fs';
import path, { dirname, join } from 'path';
import { fileURLToPath } from 'url';

import configArgs from '../src/config/args';

const __dirname = dirname(fileURLToPath(import.meta.url));
const moduleDir = path.resolve(__dirname, '..');
const dockerFile = path.resolve(__dirname, '..', 'Dockerfile');

let content = `## This Dockerfile is auto-generated by scripts/buildDockerfile.ts

FROM debian:trixie-slim as builder

RUN apt-get update && apt-get install -y nodejs npm

WORKDIR /app
COPY .dev.mk .
COPY bin ./bin
COPY package.json .
COPY package-lock.json .
COPY rollup.config.mjs .
COPY tsconfig.json .
COPY scripts ./scripts
COPY src ./src
COPY static ./static
RUN npm ci && npm run build && npm pack && mv *.tgz /tmp/app.tgz

FROM debian:trixie-slim

RUN apt-get update && apt-get install -y nodejs npm

WORKDIR /app
COPY --from=builder /tmp/app.tgz /tmp/app.tgz
RUN npm install --no-optional --no-package-lock /tmp/app.tgz && rm -f /tmp/app.tgz

ENV NODE_ENV=production`;

for (const [arg, env, def, type] of configArgs) {
  if (env === 'DM_PLUGINS') {
    content += ` \\\n ${env}=core/static,core/helloworld`;
  } else if (type === 'array') {
    content += ` \\\n ${env}=${(def as string[]).join(',')}`;
  } else if (type === 'boolean') {
    const boolDef = def ? 'true' : 'false';
    content += ` \\\n ${env}=${boolDef}`;
  } else if (type === 'json') {
    const jsonDef = JSON.stringify(def).replace(/"/g, '\\"');
    content += ` \\\n ${env}="${jsonDef}"`;
  } else {
    const envDef = ((typeof def !== 'string' ? def.toString() : def) as string)
      .replace(/"/g, '\\"')
      .replace(new RegExp(moduleDir, 'g'), '/app/node_modules/mini-dm');
    content += envDef.length > 0 ? ` \\\n ${env}="${envDef}"` : ` \\\n ${env}=`;
  }
}

content += `

EXPOSE 8081
CMD ["npx", "mini-dm"]
`;

fs.writeFileSync(dockerFile, content);
